function ASBCmain
clc;clear all;close all;
[pat,nam,ext] = fileparts(which('ASBCmain.m'));
addpath([pat,filesep,'extendFunc']); % some immature ideas will add into this fold.
addpath([pat,filesep,'supportFunc']); % add nifti IO and reslice data.
addpath([pat,filesep,'SomeTemplates']);
TempExistPath = [pat,filesep,'SomeTemplates'];
Hsize = get(0,'ScreenSize');
Bsize = min(Hsize(3),Hsize(4));
BsizeUsed = floor(Bsize*0.6);
POS = [ceil((Hsize(3)-BsizeUsed)/2),ceil((Hsize(4)-BsizeUsed)/2),BsizeUsed,BsizeUsed];

ASBC.TempExistPath = TempExistPath;
ASBC.mainpath = pat;
ASBC.fig = figure('Name','ASBC toolkit',...            
    'menubar','none',...       
    'numbertitle','off',...      
    'color',[0.95 0.95 0.95],...
    'position',POS);
movegui(ASBC.fig,'center'); 
ASBC.mainaxes = axes('parent',ASBC.fig,...
    'units','norm',...
    'pos',[0,0,1,1]);
patmain = which('ASBCmain.m');
[patfun,nam,ext] = fileparts(patmain);
if ~isempty(dir(fullfile(patfun,'Shepherd_plotout')))
    addpath(fullfile(patfun,'Shepherd_plotout'));
end
backgroundpictitle = fullfile(patfun,'hospital_bin.jpg');
[backbin backmap] = imread(backgroundpictitle);
backbinmax = max(backbin(:)); % 255
backbinmin = min(backbin(:)); % 0
backbinrange = backbinmax-backbinmin;
backbinranges = double(backbinrange);
backbin_t = (double(backbin)-double(backbinmin))/double(backbinranges); % norm to 0-1
ranges = 1/10;
backbin_t1 = backbin_t*ranges;
backbin_t2 = backbin_t1+(1-ranges);
backbin_t3 = backbin_t2*backbinranges;
backbin2 = uint8(backbin_t3);
colmap = [1-ranges:ranges/64:1;1-ranges:ranges/64:1;1-ranges:ranges/64:1]';
image(backbin2,'parent',ASBC.mainaxes,'CDataMapping','scaled');
axis(ASBC.mainaxes,'off');
% freezeColors(GLMflex.des.mainwin);
colormap(ASBC.mainaxes,colmap)
ASBC.NameExt = uicontrol('parent',ASBC.fig,...
    'units','norm',...
    'pos',[0.05,0.8,0.9,0.15],...
    'style','text',...
    'string',{'Across-Subject Brain Connectivity','Toolkit v2.1'},...
    'fontunits', 'normalized',...
    'fontsize',0.35,...
    'fontweight','bold',...
    'horizontalalign','center');
ASBC.Mapax = axes('parent',ASBC.fig,...
    'pos',[0.1,0.55,0.2,0.2]);
ASBC.Matrixax = axes('parent',ASBC.fig,...
    'pos',[0.4,0.55,0.2,0.2]);
ASBC.WTAax = axes('parent',ASBC.fig,...
    'pos',[0.7,0.55,0.2,0.2]);
ASBC.Statax = axes('parent',ASBC.fig,...
    'pos',[0.1,0.2,0.2,0.2]);
ASBC.GCAax = axes('parent',ASBC.fig,...
    'pos',[0.4,0.2,0.2,0.2]);
ASBC.MapPb = uicontrol('parent',ASBC.fig,...
    'units','norm',...
    'pos',[0.1,0.425,0.2,0.1],...
    'style','pushbutton',...
    'string','Map',...
    'fontunits', 'normalized',...
    'fontsize',0.35,...
    'fontweight','bold',...
    'horizontalalign','center');
ASBC.MatPb = uicontrol('parent',ASBC.fig,...
    'units','norm',...
    'pos',[0.4,0.425,0.2,0.1],...
    'style','pushbutton',...
    'string','Matrix',...
    'fontunits', 'normalized',...
    'fontsize',0.35,...
    'fontweight','bold',...
    'horizontalalign','center');
ASBC.WTAPb = uicontrol('parent',ASBC.fig,...
    'units','norm',...
    'pos',[0.7,0.425,0.2,0.1],...
    'style','pushbutton',...
    'string','WTA',...
    'fontunits', 'normalized',...
    'fontsize',0.35,...
    'fontweight','bold',...
    'horizontalalign','center');

ASBC.GCAPB = uicontrol('parent',ASBC.fig,...
    'units','norm',...
    'pos',[0.4,0.075,0.2,0.1],...
    'style','pushbutton',...
    'string','GCA',...
    'fontunits', 'normalized',...
    'fontsize',0.35,...
    'fontweight','bold',...
    'horizontalalign','center');
axis(ASBC.Mapax,'off')
axis(ASBC.Matrixax,'off')
axis(ASBC.WTAax,'off')
axis(ASBC.Statax,'off')
axis(ASBC.GCAax,'off')
ASBC.Exit = uicontrol('parent',ASBC.fig,...
    'units','norm',...
    'pos',[0.7,0.075,0.2,0.1],...
    'style','pushbutton',...
    'string','Exit',...
    'fontunits', 'normalized',...
    'fontsize',0.35,...
    'fontweight','bold',...
    'horizontalalign','center');

ASBC.StatPb = uicontrol('parent',ASBC.fig,...
    'units','norm',...
    'pos',[0.1,0.075,0.2,0.1],...
    'style','popupmenu',...
    'string',{'Statistic','Map&Matrix','WTA','GCA'},...
    'fontunits', 'normalized',...
    'fontsize',0.35,...
    'fontweight','bold',...
    'horizontalalign','center',...
    'Tooltipstring','Stastical analysis for two groups');

ASBC.Utils = uicontrol('parent',ASBC.fig,...
    'units','norm',...
    'pos',[0.7,0.25,0.2,0.1],...
    'style','popupmenu',...
    'string',{'Utilites','Make Final Mask','help','Viewer'},...
    'fontunits', 'normalized',...
    'fontsize',0.35,...
    'fontweight','bold',...
    'horizontalalign','center');
STATPICPAT = fullfile(patfun,'stat.png');
[STATPIC STATMAP] = imread(STATPICPAT);
imshow(STATPIC,STATMAP,'parent',ASBC.Statax)

mapmodPAT = fullfile(patfun,'mapmod.bmp');
[mapPIC mapMAP] = imread(mapmodPAT);
imshow(mapPIC,mapMAP,'parent',ASBC.Mapax)

matmodPAT = fullfile(patfun,'matrixmod2.bmp');
[matPIC matMAP] = imread(matmodPAT);
imshow(matPIC,matMAP,'parent',ASBC.Matrixax)

WTAPAT = fullfile(patfun,'WTAmod.bmp');
[WTAPIC WTAMAP] = imread(WTAPAT);
imshow(WTAPIC,WTAMAP,'parent',ASBC.WTAax)

GCAPAT = fullfile(patfun,'GCA.bmp');
[GCAPIC GCAMAP] = imread(GCAPAT);
imshow(GCAPIC,GCAMAP,'parent',ASBC.GCAax)
set(ASBC.MapPb,'callback',{@ASFCMAP,ASBC});
set(ASBC.MatPb,'callback',{@ASFCMatrix,ASBC});
set(ASBC.WTAPb,'callback',{@ASFCWTA,ASBC});
set(ASBC.StatPb,'callback',{@ASFCStatistic,ASBC});
set(ASBC.Exit,'callback',{@ASFCEXIT,ASBC});
set(ASBC.Utils,'callback',{@ASFCUtilti,ASBC});
set(ASBC.GCAPB,'callback',{@ASFCGCA,ASBC});
end
function ASFCGCA(varargin)
ASBC = varargin{3};
close(ASBC.fig)
patmainfun = which('ASBCmain.m');
[path nam ext] = fileparts(patmainfun);
addpath(fullfile(path,'ASBC_GCAmod'));
AS_GCA_GUI
end
function ASFCMAP(varargin)
ASBC = varargin{3};
close(ASBC.fig)
patmainfun = which('ASBCmain.m');
[path nam ext] = fileparts(patmainfun);
addpath(fullfile(path,'ASBC_Mapmode'));
AS_CON_MAP_GUI
end
function ASFCMatrix(varargin)
ASBC = varargin{3};
close(ASBC.fig)
patmainfun = which('ASBCmain.m');
[path nam ext] = fileparts(patmainfun);
addpath(fullfile(path,'ASBC_Matrixmode'));
AS_CON_Matrix_GUI
end
function ASFCWTA(varargin)
ASBC = varargin{3};
close(ASBC.fig)
patmainfun = which('ASBCmain.m');
[path nam ext] = fileparts(patmainfun);
addpath(fullfile(path,'AScorr_WTA'));
AS_WTA_GUI;
end
function ASFCStatistic(varargin)
ASBC = varargin{3};
patmainfun = which('ASBCmain.m');
[path nam ext] = fileparts(patmainfun);
addpath(fullfile(path,'ASBC_Statistic'));
valst = get(ASBC.StatPb,'val');
if valst==2
    AS_STAT_GUI;
    close(ASBC.fig)
end
if valst==3
    AS_WTA_statGUI;
    close(ASBC.fig)
end
if valst==4
    uiwait(msgbox('Comming Soong'));
end
end
function ASFCEXIT(varargin)
ASBC = varargin{3};
close(ASBC.fig);
end
function ASFCUtilti(varargin)
ASBC = varargin{3};
VALutil = get(ASBC.Utils,'val');
if VALutil==2 % make final mask
    addpath([ASBC.mainpath,filesep,'extendFunc',filesep,'MakeFinalMask']);
    ASBC_makefinalMask
end
if VALutil==3
    web('ASBC+manuVer1.mht')
end
if VALutil==4    
    patmainfun = which('ASBCmain.m');
    [path nam ext] = fileparts(patmainfun);
    addpath(fullfile(path,'ASBC_ShowRes'));
    ASBC_VIEW;
end
end

